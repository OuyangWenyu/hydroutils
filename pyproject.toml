[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "hydroutils"
dynamic = ["version"]
description = "A collection of commonly used util functions in hydrological modeling"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
authors = [
    { name = "Wenyu Ouyang", email = "wenyuouyang@outlook.com" },
]
maintainers = [
    { name = "Wenyu Ouyang", email = "wenyuouyang@outlook.com" },
]
keywords = ["hydroutils", "hydrology", "modeling", "statistics", "utilities"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Hydrology",
]

# 生产依赖
dependencies = [
    "numpy",
    "pandas",
    "matplotlib",
    "seaborn",
    "cartopy",
    "HydroErr",
    "async-retriever",
    "tqdm",
    "rich",
    "boto3>=1.34.34",
    "minio",
    "s3fs>=2024.2",
    "tzfpy",
    "xarray",
    "numba",
    "requests",
    "pint",
    "pint-xarray",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocstrings-python>=1.17.0",
]

[project.optional-dependencies]
# 开发依赖
dev = [
    "pytest>=6.0",
    "pytest-runner",
    "pytest-cov",
    "black[jupyter]",
    "ruff",
    "pre-commit",
    "bump2version",
    "wheel",
    "watchdog",
    "coverage[toml]",
    "Sphinx>=4.0",
    "sphinx-rtd-theme",
    "twine",
    "grip",
    "tox",
    "mypy",
    "types-requests",
]

# 测试依赖
test = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-xdist",
    "pytest-mock",
    "coverage[toml]",
]

# 文档依赖
docs = [

    "ipykernel",
    "mkdocstrings>=0.30.0",
    "mkdocstrings-python>=1.17.0",
    "mkdocstrings-python-legacy>=0.2.7",
    "Sphinx>=4.0",
    "sphinx-rtd-theme",
    "myst-parser",
    "aiohappyeyeballs>=2.6.1",
    "aiosignal>=1.4.0",
    "ipykernel>=6.30.1",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-jupyter>=0.25.1",
    "mkdocs-material>=9.6.17",
    "yarl>=1.20.1",
]

# 发布依赖
release = [
    "build",
    "twine",
    "bump2version",
]

# 完整开发环境
all = [
    "hydroutils[dev,test,docs,release]",
]

[project.urls]
Homepage = "https://github.com/OuyangWenyu/hydroutils"
Documentation = "https://ouyangwenyu.github.io/hydroutils/"
Repository = "https://github.com/OuyangWenyu/hydroutils.git"
"Bug Tracker" = "https://github.com/OuyangWenyu/hydroutils/issues"
Changelog = "https://github.com/OuyangWenyu/hydroutils/blob/main/CHANGELOG.md"

[project.scripts]
hydroutils = "hydroutils.cli:main"

# Hatch 版本管理
[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.targets.wheel]
packages = ["hydroutils"]

[tool.hatch.build.targets.sdist]
include = [
    "/hydroutils",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# UV 工具配置
[tool.uv]
dev-dependencies = [
    "pytest>=6.0",
    "pytest-cov",
    "black[jupyter]",
    "ruff",
    "pre-commit",
    "mypy",
    "bump2version",
    "coverage[toml]",
]

# pytest 配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=hydroutils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

# Coverage 配置
[tool.coverage.run]
source = ["hydroutils"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Black 代码格式化
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

# Ruff 代码检查和格式化
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001"]

[tool.ruff.isort]
known-first-party = ["hydroutils"]

# MyPy 类型检查
[tool.mypy]
python_version = "3.9"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = false
strict_equality = false
show_error_codes = true
ignore_errors = false

[[tool.mypy.overrides]]
module = [
    "cartopy.*",
    "HydroErr.*",
    "async_retriever.*",
    "boto3.*",
    "minio.*",
    "s3fs.*",
    "tzfpy.*",
    "numba.*",
    "scipy.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Bump2version 配置
[tool.bumpversion]
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "hydroutils/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"

# Tox 配置
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,coverage-report
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-cov
commands = pytest --cov=hydroutils --cov-append {posargs}

[testenv:coverage-report]
deps = coverage[toml]
skip_install = true
commands =
    coverage combine
    coverage report
    coverage html
"""

# 配置文件会在第一次使用时自动创建（通过 hydro_file.py 中的 get_cache_dir 函数）

